# https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-google-kubernetes-engine

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
      - actions/create-gke-deployment-action
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: autopilot-cluster-1
  GKE_ZONE: europe-west1
  DEPLOYMENT_NAME: bernstein-deploy
  IMAGE: static-site

jobs:
  kubeconform:
    runs-on: ubuntu-latest
    steps:
      # - name: login to Github Packages
      #   run: echo "${{ github.token }}" | docker login https://ghcr.io -u ${GITHUB_ACTOR} --password-stdin
      # - uses: actions/checkout@v2
      # - uses: docker://ghcr.io/yannh/kubeconform:master
      #   with:
      #     entrypoint: '/kubeconform'
      #     args: "-schema-location default -ignore-filename-pattern .github/workflows/ -summary --verbose -output json ."
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
      - name: Download kubeconform
        run: go install github.com/yannh/kubeconform/cmd/kubeconform@latest
      - name: Run kubeconform
        continue-on-error: true
        run: |
          export PATH=${PATH}:$(go env GOPATH)/bin
          kubeconform -schema-location default -ignore-filename-pattern .github/workflows/ -summary --verbose -output json . > kubeconform_result.json
      - name: Display kubeconform results
        continue-on-error: true
        run: cat kubeconform_result.json | jq

  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: [ kubeconform ]
    runs-on: ubuntu-latest
    environment: production

    # Checkout repo
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    - run: |-
        gcloud --quiet auth configure-docker

    # List container clusters (debug)
    - name: Get infos
      shell: bash
      run: |
        gcloud container clusters list

    # Build the Docker image
    #- name: Build
    #  run: |-
    #    docker build \
    #      --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
    #      --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #      --build-arg GITHUB_REF="$GITHUB_REF" \
    #      .
    # Push the Docker image to Google Container Registry
    #- name: Publish
    #  run: |-
    #    docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    #- name: Set up Kustomize
    #  run: |-
    #    curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #    chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    #- name: Deploy
    #  run: |-
    #    ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
    #    ./kustomize build . | kubectl apply -f -
    #    kubectl rollout status deployment/$DEPLOYMENT_NAME
    #    kubectl get services -o wide
